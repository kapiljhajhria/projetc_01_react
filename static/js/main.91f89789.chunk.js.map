{"version":3,"sources":["Square/index.js","Grid/index.js","Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","squarePressed","value","Grid","getGridRow","offset","squares","handleClick","Game","state","gameArray","Array","fill","isXnext","status","gameOver","isGameDraw","history","index","tempBoard","this","numberOfXMoves","filter","el","length","tempStatus","setState","squaresCopy","concat","x","continueGameFromCurrentState","alert","tempGameArray","slice","push","gameWon","gameDraw","squaresList","every","moves","newGameArray","newStatus","map","board","idx","onHistoryBtnPress","gameReset","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.91f89789.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css'\n\nfunction Square(props){\n\n    return (\n        <button className=\"button-square\" onClick={() => props.squarePressed()}>\n            {props.value}\n        </button>\n    );\n\n}\n\nexport default Square;","import React from 'react';\nimport Square from \"../Square\";\nimport './styles.css'\n\nfunction Grid(props){\n    function getGridRow(offset) {\n        return (\n            <div className=\"gridRow\">\n                <Square value={props.squares[offset + 0]}\n                        squarePressed={() => props.handleClick(offset + 0)}> </Square>\n                <Square value={props.squares[offset + 1]}\n                        squarePressed={() => props.handleClick(offset + 1)}> </Square>\n                <Square value={props.squares[offset + 2]}\n                        squarePressed={() => props.handleClick(offset + 2)}> </Square>\n\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"grid\">\n            {getGridRow(0)}\n            {getGridRow(3)}\n            {getGridRow(6)}\n        </div>\n    );\n}\nexport default Grid;","import React, {useState} from 'react'\nimport './styles.css'\nimport Grid from \"../Grid\";\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameArray: [Array(9).fill(null)],\n            squares: Array(9).fill(null),\n            isXnext: true,\n            status: 'Player X turn',\n            gameOver: false,\n            isGameDraw: false,\n            history: [<div>Game History</div>]\n        }\n    }\n\n    onHistoryBtnPress(index) {\n        let tempBoard = this.state.gameArray[index];\n        let numberOfXMoves = tempBoard.filter((el) => el === \"X\").length;\n        let numberOfOMoves = tempBoard.filter((el) => el === \"O\").length;\n        let tempStatus = numberOfOMoves === numberOfXMoves ? 'Player X turn' : 'Player O turn';\n        return (\n            this.setState({\n                squares: tempBoard,\n                status: tempStatus,\n            })\n        );\n    }\n\n    handleClick(index) {\n        let squaresCopy = [].concat(this.state.squares);\n        if (squaresCopy[index] !== null) {\n            return;\n        }\n        if (this.state.squares.filter((x) => x !== null).length !== this.state.gameArray.length - 1) {\n            this.continueGameFromCurrentState(squaresCopy);\n\n        }\n        if (this.state.gameOver) {\n            if (this.state.isGameDraw) {\n                alert(\"No More Moves left, Please start over\");\n            } else {\n                alert(\"game Won, refresh page to start over\");\n            }\n\n        } else {\n            // console.log(this.state.squares.filter((x)=>x!==null).length);\n            // console.log(this.state.gameArray.length-1);\n            let squaresCopy = [].concat(this.state.squares);\n            if (squaresCopy[index] !== null) {\n                return;\n            }\n            if (this.state.squares.filter((x) => x !== null).length !== this.state.gameArray.length - 1) {\n                this.continueGameFromCurrentState(squaresCopy);\n\n            }\n            squaresCopy[index] = this.state.isXnext ? 'X' : 'O';\n            let tempGameArray = this.state.gameArray.slice();\n            tempGameArray.push(squaresCopy);\n            // console.log('tempGameArray is :'+tempGameArray);\n            if (this.gameWon(squaresCopy)) {\n\n                this.setState({\n                    gameArray: tempGameArray,\n                    squares: squaresCopy,\n                    status: !this.state.isXnext ? 'Player O Won' : 'Player X Won',\n                    gameOver: true\n                });\n            } else if (this.gameDraw(squaresCopy)) {\n                this.setState({\n                    gameArray: tempGameArray,\n                    squares: squaresCopy,\n                    status: 'Game Drawn',\n                    gameOver: true,\n                    isGameDraw: true\n\n                });\n            } else {\n                this.setState({\n                    gameArray: tempGameArray,\n                    squares: squaresCopy,\n                    isXnext: !this.state.isXnext,\n                    status: !this.state.isXnext ? 'Player X turn' : 'Player O turn',\n\n                })\n            }\n        }\n        //update the state\n\n    }\n\n    gameDraw(squaresList) {\n        return squaresList.every((el) => el !== null);\n    }\n\n    gameWon(squaresList) {\n        if (squaresList[0] === 'X' && squaresList[1] === 'X' && squaresList[2] === 'X')\n            return true;\n        else if (squaresList[0] === 'O' && squaresList[1] === 'O' && squaresList[2] === 'O')\n            return true;\n        else if (squaresList[3] === 'X' && squaresList[4] === 'X' && squaresList[5] === 'X')\n            return true;\n        else if (squaresList[3] === 'O' && squaresList[4] === 'O' && squaresList[5] === 'O')\n            return true;\n        else if (squaresList[6] === 'X' && squaresList[7] === 'X' && squaresList[8] === 'X')\n            return true;\n        else if (squaresList[6] === 'O' && squaresList[7] === 'O' && squaresList[8] === 'O')\n            return true;\n        else if (squaresList[0] === 'X' && squaresList[3] === 'X' && squaresList[6] === 'X')\n            return true;\n        else if (squaresList[0] === 'O' && squaresList[3] === 'O' && squaresList[6] === 'O')\n            return true;\n        else if (squaresList[1] === 'X' && squaresList[4] === 'X' && squaresList[7] === 'X')\n            return true;\n        else if (squaresList[1] === 'O' && squaresList[4] === 'O' && squaresList[7] === 'O')\n            return true;\n        else if (squaresList[2] === 'X' && squaresList[5] === 'X' && squaresList[8] === 'X')\n            return true;\n        else if (squaresList[2] === 'O' && squaresList[5] === 'O' && squaresList[8] === 'O')\n            return true;\n        else if (squaresList[0] === 'X' && squaresList[4] === 'X' && squaresList[8] === 'X')\n            return true;\n        else if (squaresList[0] === 'O' && squaresList[4] === 'O' && squaresList[8] === 'O')\n            return true;\n        else if (squaresList[2] === 'X' && squaresList[4] === 'X' && squaresList[6] === 'X')\n            return true;\n        else if (squaresList[2] === 'O' && squaresList[4] === 'O' && squaresList[6] === 'O')\n            return true;\n        return false;\n    }\n\n    gameReset() {\n        return (\n            this.setState({\n                gameArray: [Array(9).fill(null)],\n                squares: Array(9).fill(null),\n                isXnext: true,\n                status: 'Player X turn',\n                gameOver: false,\n                isGameDraw: false,\n            })\n\n        );\n    }\n\n    continueGameFromCurrentState(squaresCopy) {\n        let moves = squaresCopy.filter((x) => x != null).length;\n        let newGameArray = this.state.gameArray.slice(0, moves + 1);\n        let newStatus = moves % 2 === 0 ? 'Player X turn' : 'Player O turn';\n\n        this.setState({\n            gameArray: newGameArray,\n            isXnext: moves % 2 === 0,\n            status: newStatus,\n\n            gameOver: false,\n            isGameDraw: false,\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"gameboard\">\n                <div className=\"left\">\n                    <div className={\"gamestatus\"}>{this.state.status}</div>\n                    <div>\n                        <Grid squares={this.state.squares} handleClick={(index) => this.handleClick(index)}/>\n                    </div>\n                </div>\n                <div className={\"right\"}>\n                    {\n                        this.state.gameArray.map((board, idx) =>\n                            (idx !== 0) ?\n                                (\n                                    <div className={\"historybtn\"}>\n                                        <div>\n                                            {/*{idx}.*/}\n                                            <button onClick={() => {\n                                                this.onHistoryBtnPress(idx)\n                                            }}>\n                                                Go back to move no {idx}\n                                            </button>\n                                        </div>\n                                    </div>\n                                ) : (<div className={\"historybtn\"}>\n                                    <div>\n                                        {/*{moves - 1}.*/}\n                                        <button onClick={() => {\n                                            this.gameReset()\n                                        }}>\n                                            Restart Game\n                                        </button>\n                                    </div>\n                                </div>)\n                        )}\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Game/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}